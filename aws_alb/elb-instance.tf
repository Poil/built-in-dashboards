# signalfx_single_value_chart.sfx_aws_alb_dash_0_0:
resource "signalfx_single_value_chart" "sfx_aws_alb_dash_0_0" {
  color_by                = "Dimension"
  description             = "Total number of concurrent TCP connections active from clients to the load balancer and from the load balancer to targets."
  is_timestamp_hidden     = false
  max_precision           = 0
  name                    = "Active Connections"
  program_text            = "A = data('ActiveConnectionCount', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum'), rollup='average').publish(label='A')"
  secondary_visualization = "None"
  show_spark_line         = false
  unit_prefix             = "Metric"

  viz_options {
    display_name = "ActiveConnectionCount"
    label        = "A"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_1:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_1" {
  axes_include_zero = false
  axes_precision    = 0
  color_by          = "Dimension"
  description       = "Number of TLS connections initiated by the load balancer that did not establish a session with the target. Possible causes include a mismatch of ciphers or protocols."
  disable_sampling  = false
  name              = "Target TLS Negotiation Errors per AZ"
  plot_type         = "LineChart"
  program_text      = "A = data('TargetTLSNegotiationErrorCount', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum') and filter('AvailabilityZone', '*'), rollup='sum', extrapolation='zero').sum(by=['AvailabilityZone']).publish(label='A')"
  show_data_markers = false
  show_event_lines  = false
  stacked           = false
  time_range        = 900
  timezone          = "UTC"
  unit_prefix       = "Metric"

  axis_left {
    label = "errors per sec"
  }

  viz_options {
    axis         = "left"
    display_name = "TargetTLSNegotiationErrorCount - Sum by sf_metric"
    label        = "A"
    value_suffix = "errors"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_2:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_2" {
  axes_include_zero = false
  axes_precision    = 0
  color_by          = "Dimension"
  description       = "Number of connections that were not successfully established between the load balancer and target."
  disable_sampling  = false
  name              = "Target Connection Errors per AZ"
  plot_type         = "LineChart"
  program_text      = "A = data('TargetConnectionErrorCount', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum') and filter('TargetGroup', '*') and filter('AvailabilityZone', '*'), rollup='sum', extrapolation='zero').sum(by=['AvailabilityZone']).publish(label='A')"
  show_data_markers = false
  show_event_lines  = false
  stacked           = false
  time_range        = 3600
  timezone          = "UTC"
  unit_prefix       = "Metric"

  viz_options {
    axis         = "left"
    display_name = "TargetConnectionErrorCount - Sum by AvailabilityZone"
    label        = "A"
    value_suffix = " errors"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_3:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_3" {
  axes_include_zero         = false
  axes_precision            = 0
  color_by                  = "Dimension"
  description               = "Number of requests processed over IPv4 and IPv6. This count includes only the requests with a response generated by a target of the load balancer."
  disable_sampling          = false
  name                      = "Request Count per AZ"
  on_chart_legend_dimension = "AvailabilityZone"
  plot_type                 = "AreaChart"
  program_text              = "A = data('RequestCount', filter=filter('namespace', 'AWS/ApplicationELB') and filter('TargetGroup', '*') and filter('AvailabilityZone', '*') and filter('stat', 'sum'), rollup='average').sum(by=['AvailabilityZone']).publish(label='A')"
  show_data_markers         = false
  show_event_lines          = false
  stacked                   = true
  time_range                = 900
  timezone                  = "UTC"
  unit_prefix               = "Metric"

  viz_options {
    axis         = "left"
    display_name = "RequestCount - Sum by AvailabilityZone"
    label        = "A"
    value_suffix = "reqs"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_4:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_4" {
  axes_include_zero = false
  axes_precision    = 0
  color_by          = "Dimension"
  description       = "Number of TLS connections initiated by the client that did not establish a session with the load balancer. Possible causes include a mismatch of ciphers or protocols."
  disable_sampling  = false
  name              = "Client TLS Negotiation Error Count per AZ"
  plot_type         = "LineChart"
  program_text      = "A = data('ClientTLSNegotiationErrorCount', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum') and filter('AvailabilityZone', '*'), rollup='average').sum(by=['AvailabilityZone']).publish(label='A')"
  show_data_markers = false
  show_event_lines  = false
  stacked           = false
  time_range        = 900
  timezone          = "UTC"
  unit_prefix       = "Metric"

  legend_options_fields {
    enabled  = true
    property = "LoadBalancer"
  }
  legend_options_fields {
    enabled  = false
    property = "sf_originatingMetric"
  }
  legend_options_fields {
    enabled  = false
    property = "sf_metric"
  }
  legend_options_fields {
    enabled  = true
    property = "stat"
  }
  legend_options_fields {
    enabled  = true
    property = "namespace"
  }
  legend_options_fields {
    enabled  = true
    property = "AvailabilityZone"
  }
  legend_options_fields {
    enabled  = true
    property = "AWSUniqueId"
  }

  viz_options {
    axis         = "left"
    display_name = "ClientTLSNegotiationErrorCount - Sum by AvailabilityZone"
    label        = "A"
    value_suffix = "errors"
  }
}
# signalfx_list_chart.sfx_aws_alb_dash_0_5:
resource "signalfx_list_chart" "sfx_aws_alb_dash_0_5" {
  color_by                = "Dimension"
  max_precision           = 1
  name                    = "# Routed Hosts per AZ"
  program_text            = <<-EOF
        A = data('HealthyHostCount', filter=filter('stat', 'mean') and filter('AvailabilityZone', '*') and filter('namespace', 'AWS/ApplicationELB') and filter('TargetGroup', '*'), extrapolation='last_value', maxExtrapolations=5).sum(by=['AvailabilityZone']).publish(label='A')
        B = data('UnHealthyHostCount', filter=filter('stat', 'mean') and filter('AvailabilityZone', '*') and filter('namespace', 'AWS/ApplicationELB') and filter('TargetGroup', '*'), extrapolation='last_value', maxExtrapolations=5).sum(by=['AvailabilityZone']).publish(label='B')
    EOF
  secondary_visualization = "None"
  sort_by                 = "+AvailabilityZone"
  time_range              = 900
  unit_prefix             = "Metric"

  viz_options {
    display_name = "Healthy"
    label        = "A"
  }
  viz_options {
    display_name = "Unhealthy"
    label        = "B"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_6:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_6" {
  axes_include_zero = false
  axes_precision    = 0
  color_by          = "Dimension"
  description       = "The time elapsed, in seconds, after the request leaves the load balancer until a response from the target is received. This is equivalent to the target_processing_time field in the access logs."
  disable_sampling  = false
  name              = "Average Target Response Time per AZ"
  plot_type         = "LineChart"
  program_text      = "A = data('TargetResponseTime', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'mean') and filter('AvailabilityZone', '*') and filter('TargetGroup', '*')).mean(by=['AvailabilityZone']).publish(label='A')"
  show_data_markers = false
  show_event_lines  = false
  stacked           = false
  time_range        = 900
  timezone          = "UTC"
  unit_prefix       = "Metric"

  viz_options {
    axis         = "left"
    display_name = "TargetResponseTime - Mean by AvailabilityZone"
    label        = "A"
    value_unit   = "Second"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_7:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_7" {
  axes_include_zero = false
  axes_precision    = 0
  color_by          = "Dimension"
  description       = "The total number of bytes processed by the load balancer over IPv4 and IPv6."
  disable_sampling  = false
  name              = "Processed Bytes/s"
  plot_type         = "LineChart"
  program_text      = "A = data('ProcessedBytes', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum'),rollup='rate').sum(by=['LoadBalancer']).publish(label='A')"
  show_data_markers = false
  show_event_lines  = false
  stacked           = false
  time_range        = 900
  timezone          = "UTC"
  unit_prefix       = "Metric"

  viz_options {
    axis         = "left"
    display_name = "Bytes/s"
    label        = "A"
    value_unit   = "Byte"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_8:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_8" {
  axes_include_zero         = false
  axes_precision            = 0
  color_by                  = "Dimension"
  disable_sampling          = false
  name                      = "Total HTTP Responses per AZ"
  on_chart_legend_dimension = "AvailabilityZone"
  plot_type                 = "AreaChart"
  program_text              = "A = data('HTTPCode_T*', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum') and filter('AvailabilityZone', '*') and filter('TargetGroup', '*'), rollup='average').sum(by=['AvailabilityZone']).publish(label='A')"
  show_data_markers         = false
  show_event_lines          = false
  stacked                   = true
  time_range                = 900
  timezone                  = "UTC"
  unit_prefix               = "Metric"

  viz_options {
    axis         = "left"
    display_name = "Responses"
    label        = "A"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_9:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_9" {
  axes_include_zero  = false
  axes_precision     = 0
  color_by           = "Metric"
  description        = "Number of HTTP error codes that originate from the load balancer. These requests have not been received by the target. This count does not include any response codes generated by the targets."
  disable_sampling   = false
  minimum_resolution = 60
  name               = "HTTP Response Code Count"
  plot_type          = "LineChart"
  program_text       = "A = data('HTTPCode_ELB*XX*', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum') and filter('AvailabilityZone', '*'), rollup='average', extrapolation='zero').sum(by=['sf_metric']).publish(label='A')"
  show_data_markers  = false
  show_event_lines   = false
  stacked            = false
  time_range         = 900
  timezone           = "UTC"
  unit_prefix        = "Metric"

  legend_options_fields {
    enabled  = true
    property = "sf_originatingMetric"
  }
  legend_options_fields {
    enabled  = false
    property = "sf_metric"
  }
  legend_options_fields {
    enabled  = false
    property = "LoadBalancer"
  }
  legend_options_fields {
    enabled  = true
    property = "stat"
  }
  legend_options_fields {
    enabled  = true
    property = "namespace"
  }
  legend_options_fields {
    enabled  = true
    property = "AvailabilityZone"
  }
  legend_options_fields {
    enabled  = true
    property = "AWSUniqueId"
  }

  viz_options {
    axis         = "left"
    display_name = "Response Count"
    label        = "A"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_10:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_10" {
  axes_include_zero = false
  axes_precision    = 0
  color_by          = "Dimension"
  description       = "Load balancer capacity units (LCU) used by your load balancer. You pay for the number of LCUs that you use per hour."
  disable_sampling  = false
  name              = "Consumed LCUs"
  plot_type         = "LineChart"
  program_text      = "A = data('ConsumedLCUs', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'mean')).publish(label='A')"
  show_data_markers = false
  show_event_lines  = false
  stacked           = false
  time_range        = 3600
  timezone          = "UTC"
  unit_prefix       = "Metric"

  axis_left {
    label = "LCU used"
  }

  viz_options {
    axis         = "left"
    display_name = "ConsumedLCUs"
    label        = "A"
    value_suffix = "LCUs"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_11:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_11" {
  axes_include_zero = false
  axes_precision    = 0
  color_by          = "Dimension"
  description       = "Average number of requests received by each target in a target group."
  disable_sampling  = false
  name              = "Requests per Target Group"
  plot_type         = "LineChart"
  program_text      = "A = data('RequestCountPerTarget', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum') and filter('TargetGroup', '*'), rollup='sum').sum(by=['TargetGroup']).publish(label='A')"
  show_data_markers = false
  show_event_lines  = false
  stacked           = false
  time_range        = 900
  timezone          = "UTC"
  unit_prefix       = "Metric"

  legend_options_fields {
    enabled  = true
    property = "TargetGroup"
  }
  legend_options_fields {
    enabled  = true
    property = "LoadBalancer"
  }
  legend_options_fields {
    enabled  = true
    property = "AWSUniqueId"
  }
  legend_options_fields {
    enabled  = false
    property = "sf_originatingMetric"
  }
  legend_options_fields {
    enabled  = false
    property = "sf_metric"
  }
  legend_options_fields {
    enabled  = false
    property = "stat"
  }
  legend_options_fields {
    enabled  = false
    property = "namespace"
  }

  viz_options {
    axis         = "left"
    display_name = "Requests"
    label        = "A"
    value_suffix = "reqs"
  }
}
# signalfx_list_chart.sfx_aws_alb_dash_0_12:
resource "signalfx_list_chart" "sfx_aws_alb_dash_0_12" {
  color_by                = "Dimension"
  description             = "Number of HTTP response codes generated by the targets. This does not include any response codes generated by the load balancer."
  max_precision           = 2
  name                    = "HTTP Response Counts per Target Group"
  program_text            = "A = data('HTTPCode_T*', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum') and filter('AvailabilityZone', '*') and filter('TargetGroup', '*'), rollup='average').sum(by=['sf_metric', 'TargetGroup']).publish(label='A')"
  secondary_visualization = "Sparkline"
  sort_by                 = "-value"
  time_range              = 900
  unit_prefix             = "Metric"

  legend_options_fields {
    enabled  = true
    property = "sf_originatingMetric"
  }
  legend_options_fields {
    enabled  = true
    property = "TargetGroup"
  }
  legend_options_fields {
    enabled  = false
    property = "AvailabilityZone"
  }
  legend_options_fields {
    enabled  = false
    property = "AWSUniqueId"
  }
  legend_options_fields {
    enabled  = false
    property = "LoadBalancer"
  }
  legend_options_fields {
    enabled  = false
    property = "namespace"
  }
  legend_options_fields {
    enabled  = false
    property = "sf_metric"
  }
  legend_options_fields {
    enabled  = false
    property = "stat"
  }

  viz_options {
    display_name = "Responses"
    label        = "A"
  }
}
# signalfx_time_chart.sfx_aws_alb_dash_0_13:
resource "signalfx_time_chart" "sfx_aws_alb_dash_0_13" {
  axes_include_zero = false
  axes_precision    = 0
  color_by          = "Dimension"
  description       = "Total number of new TCP connections established from clients to the load balancer and from the load balancer to targets."
  disable_sampling  = false
  name              = "New Connection Count"
  plot_type         = "LineChart"
  program_text      = "A = data('NewConnectionCount', filter=filter('namespace', 'AWS/ApplicationELB') and filter('stat', 'sum'), rollup='average').mean(by=['LoadBalancer']).publish(label='A')"
  show_data_markers = false
  show_event_lines  = false
  stacked           = false
  time_range        = 3600
  timezone          = "UTC"
  unit_prefix       = "Metric"

  axis_left {
    label = "connections"
  }

  viz_options {
    axis         = "left"
    display_name = "NewConnectionCount"
    label        = "A"
  }
}
# signalfx_dashboard.sfx_aws_alb_dash_0:
resource "signalfx_dashboard" "sfx_aws_alb_dash_0" {
  charts_resolution       = "default"
  dashboard_group         = signalfx_dashboard_group.sfx_aws_alb.id
  discovery_options_query = "namespace:\"AWS/ApplicationELB\""
  discovery_options_selectors = [
    "_exists_:LoadBalancer",
  ]
  name = "Application ELB Instance"

  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_7.id
    column   = 4
    height   = 1
    row      = 2
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_8.id
    column   = 0
    height   = 1
    row      = 3
    width    = 4
  }
  chart {
    chart_id = signalfx_list_chart.sfx_aws_alb_dash_0_5.id
    column   = 8
    height   = 2
    row      = 1
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_10.id
    column   = 8
    height   = 1
    row      = 3
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_9.id
    column   = 4
    height   = 1
    row      = 3
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_1.id
    column   = 4
    height   = 1
    row      = 0
    width    = 4
  }
  chart {
    chart_id = signalfx_single_value_chart.sfx_aws_alb_dash_0_0.id
    column   = 0
    height   = 1
    row      = 0
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_6.id
    column   = 0
    height   = 1
    row      = 2
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_13.id
    column   = 8
    height   = 1
    row      = 4
    width    = 4
  }
  chart {
    chart_id = signalfx_list_chart.sfx_aws_alb_dash_0_12.id
    column   = 4
    height   = 1
    row      = 4
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_4.id
    column   = 4
    height   = 1
    row      = 1
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_3.id
    column   = 0
    height   = 1
    row      = 1
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_2.id
    column   = 8
    height   = 1
    row      = 0
    width    = 4
  }
  chart {
    chart_id = signalfx_time_chart.sfx_aws_alb_dash_0_11.id
    column   = 0
    height   = 1
    row      = 4
    width    = 4
  }

  variable {
    alias                  = "Load Balancer"
    apply_if_exist         = false
    description            = "null"
    property               = "LoadBalancer"
    replace_only           = false
    restricted_suggestions = false
    value_required         = true
    values = [
      "Choose a Load Balancer",
    ]
    values_suggested = []
  }
}
